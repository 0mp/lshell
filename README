#####################################
#  LSHELL - Limited Shell - README  #
#####################################
#
# $Id: README,v 1.15 2009-01-27 00:24:54 ghantoos Exp $

Contact: ghantoos@ghantoos.org
http://ghantoos.org/limited-shell-lshell/
#####################################

I've commented the source file (lshell.py) and the template configuration 
file (lshell.conf) as much as thought would be enough.

###
1- Installation:
###
    You have 2 options:
        * use the setup.py present in the tar. It uses python distutils to 
          install everything in the right place:
            - Extract the files in the wanted directory (tar xvfz lshell.tar.gz)
            - Run: $> sudo python setup.py install
        * Install the rpm:
            - $> rpm -Uvh lshell-x.x-x.noarch.rpm
        * Install the deb:
            - $> dpkg -i lshell-x.x-x.deb
    Files tree should look something like this:

    etc/lshell.conf         ---> /etc/lshell.conf
    bin/lshell              ---> /usr/bin/lshell
    lshellmodule/lshell.py  ---> /usr/lib/python2.4/site-packages/lshell.py
    lshellmodule/lshell.pyc ---> /usr/lib/python2.4/site-packages/lshell.pyc
    CHANGES                 ---> /usr/share/doc/lshell/CHANGES
    COPYING                 ---> /usr/share/doc/lshell/COPYING
    README                  ---> /usr/share/doc/lshell/README
    log/lshell.log          ---> /var/log/lshell.log

###
2- Configuration:
###
    lshell.conf presents a template configuration file. Fields to fill are:
        * allowed: a list of the allowed commands
        * forbidden: a list of forbidden character or commands
        * warning_counter: number of warnings when user enters a 
          forbidden value before getting exited from lshell.
        * timer: a value in seconds for the session timer
        * passwd: password of specific user
        * path: list of path to restrict the user geographicaly
        * home_path: set the home folder of your user. If not specified, the home
          directory is set to the $HOME environment variable
        * env_path: update the environment variable $PATH of the user (optional)
        * scp: 1 or 0 to allow of forbid the use of scp on a user's account
        * sftp: 1 or 0 to allow of forbid the use of sftp on a user's account
        * overssh: list of command allowed to execute over ssh (e.g. rsync,  
          rdiff-backup, scp, etc.)

    A default profile is available to let multiple users use the same 
    comfiguration. Nevertheless, you will have to create a [username] section 
    to at least put a password.

###
3- Usage:
###
    To launch the Limited Shell, just execute lshell specifying the 
    location of your configuration file:
    $> lshell --config /path/to/configuration/file

    By default lshell will try to launch using /etc/lshell.conf unless 
    specified otherwise (using --config).

###
4- Use case 1: OpenSSH & authorized_keys
###
    The primary goal of lshell, was to be able to create shell accounts 
    with ssh access    and restrict their environment to a couple a needed 
    commands. 
    For example User 'bla' who #_only_# needs to ssh from my server to 
    another machine.
    His 'allowed' variable in the configuration file will be only ['ssh'].
    In this case, my configuration file will look something like this:

    # START
    [bla]
    passwd          : blabla
    allowed         : ['ssh']
    forbidden       : [';', '&', '|'] 
    warning_counter : 2
    timer           : 0
    path            : ['/home/bla', '/usr/bla']
    home_path       : '/home/bla
    env_path        : ':/sbin:/usr/bla'
    scp             : 1 # or 0
    sftp            : 1 # or 0
    # END
    
    In order to launch lshell limited to the 'ssh' command, I used ssh's 
    authorized_keys:
    $> vi /home/bla/.ssh/authorized_keys
    and add :
        command="/usr/bin/lshell --config /path/to/lshell.conf",no-port-for
        warding,no-X11-forwarding,no-agent-forwarding,no-pty
    just before the "ssh-dss blablablabla" part.

    This will have the effect of executing lshell upon user's connection.
    The great thing about it, is that when the user exist lshell, the ssh 
    session is automatically ended! : )

    Your authorized_keys should look something like this:

    no-port-forwarding,no-X11-forwarding,no-agent-forwarding,command=
    "/path/to/lshell.py /path/to/lshell.conf" ssh-dss AAAAHadWj4caz5T
    AA6Xgonf2FjpmpgpquvN+6cQsGTEOwm6R+oEaFBU1VyfuwlEklqn3TWnWzACBAKNJ
    cJFr6pJsECEz5LZFtGu7b4tYNu8/vne11SjZBrOqm7WuQiWpOguzyldk6IJSnIKrn
    WoT/fGgXeED2UingA65bKIvOh0B3NzaC1kc3McsrBEDjQ3NAAAAFQDP6OHwkLNSA1
    PyKqIMzqiCpAmJE7gRgFu8Pxc7i1TZvmiXSCjdXRaXZNncxPj6eOUng4QFDAoZc6n
    N8iUYCwKJ2pl2ryMqC/hnBVL5SRne+FqcRKbzWXkh7NI6KtJ4XxI32NI/OIpZAo2e
    G/8rdCgShZflCbpFZL865fKmUH2pefSZwl/12VXWDqQmukNp6+XrA3LPXdElIeQAA
    ACAHoQ3GpC4/BcxuHj1TBNg7Hw3KxZMeL1vQNVF2+cfJ22U1hERNBcRuUjqe5Gv9Q
    GoCMcsNpG8/FtV5Pnoq8nPPWuUkrBeBxY6KSgzaZ/DTSd+WvPOwNonntRkEwxpSdk
    lSqXpmqNlw2fPodg6QAAAIEVdZiSZZ9EoH+4MJjKDSvE= bla@somewhere.somet
    hing

    Now, when "sshing" to your machine, with the bla user, he will be 
    forced to lshell! And when quitting lshell, the ssh session is
    automatically ended! : )

###
5- Use case 2: /etc/passwd
###
    In order to configure a user account to use lshell by default, you must:
     $> chsh -s /usr/bin/lshell user_name

    After this, whichever method is used by the user to log into his account,
    he will end up using the limited shell you configured for him!

###
6- Contact
###
    If you want to contribute to this project, please do not hesitate.
    Send me a patch, or just your new lshell.py so I can check it out.
    You can use the interface on sourceforge.net: 
    http://sourceforge.net/projects/lshell/
    Here is my mail again: ghantoos@ghantoos.org

    Cheers,
    Ignace Mouzannar (-ghantoos-)
